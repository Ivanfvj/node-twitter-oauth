import { Schema, Document, Model, model, SchemaOptions } from "mongoose";

export interface OAuth1State {
  // For OAuth 1.0a
  oauth_token?: string;
  oauth_token_secret?: string;
}

export interface OAuth2State {
  // For OAuth 2.0
  state?: string;
  codeVerifier?: string;
  codeChallenge?: string;
}

export interface TwitterOAuthStateModel extends OAuth1State, OAuth2State {
  id: string;
  // The login url generated by Twitter
  url: string;
  // The OAuth version state
  version: "1" | "1.0a" | "2";

  expireAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface TwitterOAuthState
  extends Omit<TwitterOAuthStateModel, "id" | "createdAt" | "updatedAt"> {}

export interface TwitterOAuthStateDocument
  extends TwitterOAuthState,
    Document {}
export interface MongoTwitterOAuthState
  extends Model<TwitterOAuthStateDocument> {}

export const EXPIRE_TIME_MS = 30 * 60 * 1000; // 30 minutes

const opts: SchemaOptions = { toJSON: { virtuals: true }, timestamps: true };
const TwitterOAuthSchema = new Schema<
  TwitterOAuthStateDocument,
  MongoTwitterOAuthState,
  TwitterOAuthState
>(
  {
    url: String,
    version: String,

    // For OAuth 1.0a
    oauth_token: String,
    oauth_token_secret: String,

    // For OAuth 2.0
    state: String,
    codeVerifier: String,
    codeChallenge: String,

    // Expires uses seconds format here
    expireAt: {
      type: Date,
      // Create TTL index to delete document automatically after this period of seconds
      // Mongoose set this field for expire in seconds so we divide by 1000
      expires: EXPIRE_TIME_MS / 1000,
      // Default date is required if this field is not provided at document creation
      default: Date.now,
    },
  },
  opts
);

export default model<TwitterOAuthStateDocument, MongoTwitterOAuthState>(
  "twitter_oauth_state",
  TwitterOAuthSchema
);
